# 一个实体类对应两张表，覆盖
spring.main.allow-bean-definition-overriding=true

#配置shardingjdbc的配片策略
#配置数据源的别名
spring.shardingsphere.datasource.names=m1

#配置数据源的信息
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/course_db?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=123456

#指定course表分布情况，配置表在哪个数据库里面，表名称是什么
#spring.shardingsphere.sharding.tables.course.actual-data-nodes=m1.course_$->{1..2}
spring.shardingsphere.sharding.tables.course.actualDataNodes=m1.course_$->{1..2}
#指定course表里面主键cid，生成规则 snowflake
#spring.shardingsphere.sharding.tables.course.key-generator.column=cid
#spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.course.keyGenerator.column=cid
spring.shardingsphere.sharding.tables.course.keyGenerator.type=SNOWFLAKE

#指定分片的策略，如果cid只为奇数添加到course_1否则到course_2
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{cid % 2 + 1}
spring.shardingsphere.sharding.tables.course.tableStrategy.inline.shardingColumn=cid
spring.shardingsphere.sharding.tables.course.tableStrategy.inline.algorithmExpression=course_$->{cid % 2 + 1}

#打开SQL 输出日志
spring.shardingsphere.props.sql.show=true



