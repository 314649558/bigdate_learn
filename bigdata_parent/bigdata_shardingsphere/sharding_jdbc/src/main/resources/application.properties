# 一个实体类对应两张表，覆盖
spring.main.allow-bean-definition-overriding=true

#配置shardingjdbc的配片策略
#水平分库，配置多个数据源
spring.shardingsphere.datasource.names=m1,m2

#配置数据源的信息1
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/edu_db_1?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=123456
#配置数据源的信息2
spring.shardingsphere.datasource.m2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m2.url=jdbc:mysql://localhost:3306/edu_db_2?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m2.username=root
spring.shardingsphere.datasource.m2.password=123456

#指定数据库分布情况和表的分布情况
spring.shardingsphere.sharding.tables.course.actualDataNodes=m$->{1..2}.course_$->{1..2}

#指定course表里面主键cid，生成规则 snowflake
spring.shardingsphere.sharding.tables.course.keyGenerator.column=cid
spring.shardingsphere.sharding.tables.course.keyGenerator.type=SNOWFLAKE

#指定表分片的策略，如果cid只为偶数添加到course_1否则到course_2
spring.shardingsphere.sharding.tables.course.tableStrategy.inline.shardingColumn=cid
spring.shardingsphere.sharding.tables.course.tableStrategy.inline.algorithmExpression=course_$->{cid % 2 + 1}

#指定库的分片策略，如果userid为偶数则添加到edu_db_1，否则添加到edu_db_2
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=m$->{user_id % 2 + 1}
#针对course才做处理
spring.shardingsphere.sharding.tables.course.databaseStrategy.inline.shardingColumn=user_id
spring.shardingsphere.sharding.tables.course.databaseStrategy.inline.algorithmExpression=m$->{user_id % 2 + 1}


#打开SQL 输出日志
spring.shardingsphere.props.sql.show=true



